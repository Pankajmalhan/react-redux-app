step 1:
run  npm i redux react-redux command
step 2:
define intial state
var intialState={
    bugsList:[],
    generalInfo:null
}
state 3:
define reduer
import intialState from '../state/state';
export default function bugReducer(state=intialState.bugsList, action) {
    switch(action.type){
        case 'Load_Category':
                return 100
        

    };
    return state;
}

state 4:
create store
import {createStore, applyMiddleware,compose    } from 'redux';
import appReducers from '../reducers/bugReducer';
import INITIAL_STATE from '../state/state';
/*********** Create Logger   *******************/
const store = createStore(
    appReducers,
    INITIAL_STATE,
);
export default store;


state 5:
add provider in root component
<Provider store={store}> 
      <div role="main" class="container">
        <div class="row row-offcanvas row-offcanvas-right">
          <div class="col-12 col-md-9">
            <AddBug />
            <BugList />
          </div>
          <div class="col-6 col-md-3 sidebar-offcanvas" id="sidebar">
            <BugStatus />
          </div>
        </div>
        <hr />
      </div>
      </Provider>



import { combineReducers } from 'redux';
export default combineReducers({
    groups:groupReducer,
    global:globalReducer,
    usageReducer: usageReducer,
    feedsReducer: feedsReducer,
    profileReducer: profileReducer,
    groupAnalyticsReducer: groupAnalyticsReducer,
    itemCount:itemCount,
    users:userReducer,
    firebase:firebaseReducer,
});




*******************************
export const getUserSpaceCredentials=(data) => {
    return {
        type: GET_USER_SPACE_CREDENTIALS
    }
}


************************************

import { bindActionCreators } from "redux";
import { connect } from "react-redux";
function mapStateToProps(state) {
  return {
    groupEvents: state.groups.groupEvents,
    showLoader: state.groups.showLoader,
    actionStatus: state.global.actionStatus
  };
}

function mapDispatchToProps(dispatch) {
  return bindActionCreators(
    {
      getGroupEvents: getGroupEvents,
      addGroupEvent: addGroupEvent,
      updateGroupEvent: updateGroupEvent,
      setExecutedActionStatus: setExecutedActionStatus,
      loadGroupDetails: loadGroupDetails
    },
    dispatch
  );
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(EventScreen);